{
	"info": {
		"_postman_id": "46cb58f2-c970-47d0-9e1e-8bafb10c9eb8",
		"name": "Payment Checkout Workflow",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21154883",
		"_collection_link": "https://gloriaqa.postman.co/workspace/Gloria-Edwin~33d34777-4469-43c2-bc05-0e57c37ced0f/collection/21154883-46cb58f2-c970-47d0-9e1e-8bafb10c9eb8?action=share&source=collection_link&creator=21154883"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Signin with Valid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Successful\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"johnsnow@prunny.com\",\n\t\"password\": \"Passw0rd12$\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/signin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signin With Empty Email Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"\",\n\t\"password\": \"Passw0rd12$\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/signin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signin With Empty Password Field",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"johnsnow@prunny\",\n\t\"password\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/signin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signin With Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"johnsnow@\",\n\t\"password\": \"Passw0rd12$\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/signin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Signin With Incorrect Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"email\": \"johnsnow@prunny.com\",\n\t\"password\": \"Passw0rd\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/signin",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"signin"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Initiate Transaction",
			"item": [
				{
					"name": "Initiate Transaction with Valid Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Lana Lang\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"firstName\": \"Jon\",\n\t\"lastName\": \"Snow\",\n\t\"email\": \"johnsnow@prunny.com\",\n\t\"amount\": 1000.00,\n\t\"currency\": \"NGN\",\n\t\"mode\": \"BANK_TRANSFER\",\n\t\"destinationBankCode\": \"057\",\n\t\"destinationAccountNumber\": \"\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transaction/initiate ",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"initiate "
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate with Missing FirstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"lastName\": \"Snow\",\n\t\"email\": \"johnsnow@prunny.com\",\n\t\"amount\": 1000.00,\n\t\"currency\": \"NGN\",\n\t\"mode\": \"BANK_TRANSFER\",\n\t\"destinationBankCode\": \"057\",\n\t\"destinationAccountNumber\": \"0123456789\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transaction/initiate ",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"initiate "
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate with Empty Email Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"firstName\": \"Jon\",\n\t\"lastName\": \"Snow\",\n\t\"email\": \"\",\n\t\"amount\": 1000.00,\n\t\"currency\": \"NGN\",\n\t\"mode\": \"BANK_TRANSFER\",\n\t\"destinationBankCode\": \"057\",\n\t\"destinationAccountNumber\": \"0123456789\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transaction/initiate ",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"initiate "
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate with Empty Account Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"firstName\": \"Jon\",\n\t\"lastName\": \"Snow\",\n\t\"email\": \"\",\n\t\"amount\": 1000.00,\n\t\"currency\": \"NGN\",\n\t\"mode\": \"BANK_TRANSFER\",\n\t\"destinationBankCode\": \"057\",\n\t\"destinationAccountNumber\": \"\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transaction/initiate ",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"initiate "
							]
						}
					},
					"response": []
				},
				{
					"name": "Enter numbers as firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"firstName\": 123454545,\n\t\"lastName\": \"Snow\",\n\t\"email\": \"johnsnow@prunny.com\",\n\t\"amount\": 1000.00,\n\t\"currency\": \"NGN\",\n\t\"mode\": \"BANK_TRANSFER\",\n\t\"destinationBankCode\": \"057\",\n\t\"destinationAccountNumber\": \"0123456789\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transaction/initiate ",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"initiate "
							]
						}
					},
					"response": []
				},
				{
					"name": "Initiate with Invalid Email Address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"firstName\": \"Jon\",\n\t\"lastName\": \"Snow\",\n\t\"email\": \"johnprunny.com\",\n\t\"amount\": 1000.00,\n\t\"currency\": \"NGN\",\n\t\"mode\": \"BANK_TRANSFER\",\n\t\"destinationBankCode\": \"057\",\n\t\"destinationAccountNumber\": \"0123456789\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transaction/initiate ",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"initiate "
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authorize Transaction",
			"item": [
				{
					"name": "Authorize Transaction with Valid Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Successful\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"sessionID\": \"kl0yIycMqUmkbXNk\",\n\t\"trxRef\": \"10001221100\",\n\t\"action\": \"AUTHORIZE_PIN\",\n\t\"pin\": \"1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transation/authorize",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transation",
								"authorize"
							]
						}
					},
					"response": []
				},
				{
					"name": "With Invalid Session ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Successful\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"sessionID\": \"kl0yIycMqU\",\n\t\"trxRef\": \"10001221100\",\n\t\"action\": \"AUTHORIZE_PIN\",\n\t\"pin\": \"1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transation/authorize",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transation",
								"authorize"
							]
						}
					},
					"response": []
				},
				{
					"name": "With Invalid Transaction Reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"sessionID\": \"kl0yIycMqUmkbXNk\",\n\t\"trxRef\": \"1000122\",\n\t\"action\": \"AUTHORIZE_PIN\",\n\t\"pin\": \"1234\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transation/authorize",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transation",
								"authorize"
							]
						}
					},
					"response": []
				},
				{
					"name": "With Empty Request Body",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/transation/authorize",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transation",
								"authorize"
							]
						}
					},
					"response": []
				},
				{
					"name": "With Invalid Pin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"sessionID\": \"kl0yIycMqUmkbXNk\",\n\t\"trxRef\": \"10001221100\",\n\t\"action\": \"AUTHORIZE_PIN\",\n\t\"pin\": \"12\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/transation/authorize",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transation",
								"authorize"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validate Transaction",
			"item": [
				{
					"name": "Validate with Valid Transaction Reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Successful\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/transaction/{{trxRef}}",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"{{trxRef}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Validate with Invalid Transaction Ref.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should return 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Bad Request\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/transaction/00006788",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"transaction",
								"00006788"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "test",
			"item": [
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		}
	]
}