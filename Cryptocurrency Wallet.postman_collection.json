{
	"info": {
		"_postman_id": "20300d07-5697-41e4-97ca-3a47102866ee",
		"name": "Cryptocurrency Wallet",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21154883",
		"_collection_link": "https://gloriaqa.postman.co/workspace/Gloria-Edwin~33d34777-4469-43c2-bc05-0e57c37ced0f/collection/21154883-20300d07-5697-41e4-97ca-3a47102866ee?action=share&source=collection_link&creator=21154883"
	},
	"item": [
		{
			"name": "Register User",
			"item": [
				{
					"name": "Register User With Valid Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"var response = pm.response.json();",
									"pm.test(\"Response structure is correct\", function () {",
									"    pm.expect(response).to.have.property(\"username\");",
									"    pm.expect(response).to.have.property(\"email\");",
									"    pm.expect(response).to.have.property(\"password\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"PASSWORD\", \"securepassword\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{USERNAME}}\",\n  \"password\": \"{{PASSWORD}}\",\n  \"email\": \"{{EMAIL}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Missing email returns 400\", function () {",
									"    pm.response.to.have.status(400); ",
									"    pm.response.to.have.jsonBody(\"error\", \"Email is required\");  ",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"PASSWORD\", \"securepassword\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{USERNAME}}\",\n  \"password\": \"{{PASSWORD}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Missing password returns 400\", function () {",
									"    pm.response.to.have.status(400); ",
									"    pm.response.to.have.jsonBody(\"error\", \"Password is required\");  ",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{USERNAME}}\",\n  \"email\": \"{{EMAIL}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Missing username returns 400\", function () {",
									"    pm.response.to.have.status(400); ",
									"    pm.response.to.have.jsonBody(\"error\", \"Username is required\");  ",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"PASSWORD\", \"securepassword\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"{{PASSWORD}}\",\n  \"email\": \"{{EMAIL}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Email Format",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid email format returns 400\", function () {",
									"    pm.response.to.have.status(400); ",
									"    pm.response.to.have.jsonBody(\"error\", \"Invalid email format\");  ",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"PASSWORD\", \"securepassword\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{USERNAME}}\",\n  \"password\": \"{{PASSWORD}}\",\n  \"email\": \"user@com\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Existing User Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Email already exists returns 409\", function () {",
									"    pm.response.to.have.status(409);",
									"    pm.response.to.have.jsonBody(\"error\", \"Email already exists\");  ",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"PASSWORD\", \"securepassword\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"gloriedwin.qa@gmail.com\",\n  \"password\": \"{{PASSWORD}}\",\n  \"email\": \"{{EMAIL}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"register"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Login User",
			"item": [
				{
					"name": "Login With Valid Credentials",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"PASSWORD\", \"securepassword\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"var response = pm.response.json();",
									"pm.test(\"Response structure is correct\", function () {",
									"    pm.expect(response).to.have.property(\"access_token\");",
									"    pm.expect(response).to.have.property(\"token_type\");",
									"    pm.expect(response).to.have.property(\"expires_in\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"username\": \"{{USERNAME}}\",\n  \"password\": \"{{PASSWORD}}\"\n\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "With Invalid Username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"PASSWORD\", \"securepassword\");",
									"",
									"let randomUsername = \"user\" + Math.random().toString(36).substring(2, 10); ",
									"pm.collectionVariables.set(\"random_username\", randomUsername);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid username returns 404\", function () {",
									"    pm.response.to.have.status(404);",
									"    pm.response.to.have.jsonBody(\"error\", \"User not found\"); ",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"username\": \"{{random_username}}\",\n  \"password\": \"{{PASSWORD}}\"\n\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "With Invalid Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"PASSWORD\", \"securepassword\");",
									"",
									"let randomPassword = Math.random().toString(36).substring(2, 12); ",
									"pm.collectionVariables.set(\"random_password\", randomPassword); "
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid password returns 404\", function () {",
									"    pm.response.to.have.status(404);  ",
									"    pm.response.to.have.jsonBody(\"error\", \"User not found\");  ",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"username\": \"{{USERNAME}}\",\n  \"password\": \"{{random_password}}\"\n\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing Username",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"PASSWORD\", \"securepassword\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Missing username returns 400\", function () {",
									"    pm.response.to.have.status(400);  ",
									"    pm.response.to.have.jsonBody(\"error\", \"Username is required\");  ",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"password\": \"{{PASSWORD}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing Password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"PASSWORD\", \"securepassword\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Missing password returns 400\", function () {",
									"    pm.response.to.have.status(400);  ",
									"    pm.response.to.have.jsonBody(\"error\", \"Password is required\"); ",
									"});",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n  \"username\": \"{{USERNAME}}\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Retrieve Wallet Balance",
			"item": [
				{
					"name": "Retrieve Wallet Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"var response = pm.response.json();",
									"pm.test(\"Response structure is correct\", function () {",
									"    pm.expect(response).to.have.property(\"balance\");",
									"    pm.expect(response).to.have.property(\"currency\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/balance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid Access Token Should Return\", function () {",
									"    pm.response.to.have.status(401);",
									"    pm.response.to.have.jsonBody(\"error\", \"Unauthorized\");",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "asdbvjdsvbjdsbvjksdbvjsdkvbsdjkbvjdskvbdsjkvbdsjvbdsvb",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/balance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Missing Access Token Should Return\", function () {",
									"    pm.response.to.have.status(401);",
									"    pm.response.to.have.jsonBody(\"error\", \"Unauthorized\");",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/balance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"balance"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "List Transactions",
			"item": [
				{
					"name": "List Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"var response = pm.response.json();",
									"pm.test(\"verify that response structure is correct\", function () {",
									"    pm.expect(response).to.have.property(\"transactions\");",
									"    pm.expect(response.transactions).to.be.an('array').that.is.not.empty;",
									"    ",
									"    pm.expect(response.transactions[0]).to.have.property(\"id\");",
									"    pm.expect(response.transactions[0]).to.have.property(\"type\");",
									"    pm.expect(response.transactions[0]).to.have.property(\"amount\");",
									"    pm.expect(response.transactions[0]).to.have.property(\"currency\");",
									"    pm.expect(response.transactions[0]).to.have.property(\"timestamp\");",
									"    pm.expect(response.transactions[0]).to.have.property(\"from_wallet\");   ",
									"",
									"    pm.expect(response.transactions[1]).to.have.property(\"id\");",
									"    pm.expect(response.transactions[1]).to.have.property(\"type\");",
									"    pm.expect(response.transactions[1]).to.have.property(\"amount\");",
									"    pm.expect(response.transactions[1]).to.have.property(\"currency\");",
									"    pm.expect(response.transactions[1]).to.have.property(\"timestamp\");",
									"    pm.expect(response.transactions[1]).to.have.property(\"to_wallet\");   ",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid Access Token Should Return\", function () {",
									"    pm.response.to.have.status(401);",
									"    pm.response.to.have.jsonBody(\"error\", \"Unauthorized\");",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "sdbvjsdbvsdvb dmsvb jdvb djkv bdjkvb dnjv dnv d vjk bdjvbdjvbjdvbndj",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Missing Access Token Should Return\", function () {",
									"    pm.response.to.have.status(401);",
									"    pm.response.to.have.jsonBody(\"error\", \"Unauthorized\");",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transfer Crypto",
			"item": [
				{
					"name": "Transfer Crypto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"var response = pm.response.json();",
									"pm.test(\"Response contains all required fields\", function () {",
									"    pm.expect(response).to.have.property(\"id\");",
									"    pm.expect(response).to.have.property(\"to_address\");",
									"    pm.expect(response).to.have.property(\"type\");",
									"    pm.expect(response).to.have.property(\"amount\");",
									"    pm.expect(response).to.have.property(\"currency\");",
									"    pm.expect(response).to.have.property(\"timestamp\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipient_address\": \"0x1234567890ABCDEF\",\n  \"amount\": 5.0,\n  \"currency\": \"ETH\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Missing Amount returns 400\", function () {",
									"    pm.response.to.have.status(400);  ",
									"    pm.response.to.have.jsonBody(\"error\", \"Amount is required\"); ",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipient_address\": \"0x1234567890ABCDEF\",\n  \"currency\": \"ETH\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid recipient address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid Recipient Address returns 400\", function () {",
									"    pm.response.to.have.status(400);  ",
									"    pm.response.to.have.jsonBody(\"error\", \"Invalid recipient address\");",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipient_address\": \"0x1234567\",\n  \"amount\": 5.0,\n  \"currency\": \"ETH\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Insufficient funds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Insufficient Funds returns 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.jsonBody(\"error\", \"Insufficient funds\");",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"recipient_address\": \"0x1234567890ABCDEF\",\n  \"amount\": 1000,\n  \"currency\": \"ETH\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transactions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Calculate Transaction Fees",
			"item": [
				{
					"name": "Transaction Fee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"var response = pm.response.json();",
									"pm.test(\"Response structure is correct\", function () {",
									"    pm.expect(response).to.have.property(\"fee\");",
									"    pm.expect(response).to.have.property(\"currency\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n  \"amount\": 2.5,\n  \"currency\": \"BTC\",\n  \"recipient_address\": \"0x1234567890ABCDEF\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transaction_fee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transaction_fee"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid amount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid amount returns 400\", function () {",
									"    pm.response.to.have.status(400); ",
									"    pm.response.to.have.jsonBody(\"error\", \"Invalid amount\");",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n  \"amount\": -2.5,\n  \"currency\": \"BTC\",\n  \"recipient_address\": \"0x1234567890ABCDEF\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transaction_fee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transaction_fee"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing currency",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Missing currency returns 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.jsonBody(\"error\", \"Currency is required\");",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n  \"amount\": 2.5,\n  \"recipient_address\": \"0x1234567890ABCDEF\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transaction_fee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transaction_fee"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid recipient address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid recipient address returns 400\", function () {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.have.jsonBody(\"error\", \"Invalid recipient address\");",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\n  \"amount\": 2.5,\n  \"recipient_address\": \"0x1234567890ABCDEF\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/transaction_fee",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"transaction_fee"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Currency Exchange Rate",
			"item": [
				{
					"name": "Exchange Rate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									"var response = pm.response.json();",
									"pm.test(\"Verify response contains all required fields\", function () {",
									"    pm.expect(response).to.have.property(\"BTC\");",
									"    pm.expect(response).to.have.property(\"ETH\");",
									"    pm.expect(response).to.have.property(\"USD\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/exchange_rates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"exchange_rates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Invalid Token Should Return\", function () {",
									"    pm.response.to.have.status(401);",
									"    pm.response.to.have.jsonBody(\"error\", \"Unauthorized\");",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "dsfdsjhfgdshjfgdshfgdhsbvdshjvbdshjvbdshjv djhsbv hdjbvdshjvbsdhj",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/exchange_rates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"exchange_rates"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing Access Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Missing Access Token Should Return\", function () {",
									"    pm.response.to.have.status(401);",
									"    pm.response.to.have.jsonBody(\"error\", \"Unauthorized\");",
									"});",
									"",
									"pm.test(\"Response time is less than 2000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(2000);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/exchange_rates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"exchange_rates"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "random_username",
			"value": ""
		},
		{
			"key": "random_password",
			"value": ""
		}
	]
}